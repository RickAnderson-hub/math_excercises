plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '7.2.1'
    id 'jacoco'
}

group = 'org.rick'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springShellVersion', "3.4.1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.shell:spring-shell-starter'
    implementation ('org.apache.pdfbox:pdfbox:3.0.5') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.shell:spring-shell-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.shell:spring-shell-dependencies:${springShellVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = '0.8.13'
}

// Configure the existing JaCoCo report task created by the jacoco plugin
tasks.named('jacocoTestReport', JacocoReport) {
    dependsOn tasks.named('test')
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    // Exclude data model classes from coverage metrics
    def modelExcludes = ['**/org/rick/math_excercises/model/**']
    classDirectories.setFrom(files(sourceSets.main.output).asFileTree.matching { exclude modelExcludes })
    sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
}

// Configure the existing coverage verification task
tasks.named('jacocoTestCoverageVerification', JacocoCoverageVerification) {
    dependsOn tasks.named('test')
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
    // Exclude data model classes from coverage verification
    def modelExcludes = ['**/org/rick/math_excercises/model/**']
    classDirectories.setFrom(files(sourceSets.main.output).asFileTree.matching { exclude modelExcludes })
    sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
}

// Ensure formatting is checked and coverage verified in the verification lifecycle
tasks.named('check') {
    dependsOn 'spotlessCheck', 'jacocoTestCoverageVerification'
}

// --- Custom generation tasks ---
// Use -Plimit=20 -PnumberOfExercises=200 -Piterations=1 to override defaults.
// You can also use -Pcount as an alias for numberOfExercises.

def defaultLimit = (project.findProperty('limit') ?: '20') as String
// Support both numberOfExercises and count as property names

def defaultCount = ((project.findProperty('numberOfExercises') ?: project.findProperty('count')) ?: '200') as String

def defaultIterations = (project.findProperty('iterations') ?: '1') as String

// Optional override for output base file name

def outputBaseName = (project.findProperty('outputBaseName') ?: 'MathExercises') as String

// Addition/Subtraction generator
tasks.register('generateAddSub', JavaExec) {
    group = 'application'
    description = 'Generate math exercises (ADDITION,SUBTRACTION) into a PDF using the app'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.rick.math_excercises.MathExcercisesApplication'
    args defaultLimit, defaultCount, defaultIterations, 'ADDITION,SUBTRACTION'
    // Distinct filename suffix
    jvmArgs "-DoutputBaseName=${outputBaseName}", '-DoutputSuffix=_AddSub'
    dependsOn tasks.named('classes')
}

// Multiplication/Division generator
// If no explicit numberOfExercises provided, default to 200 to render 4 columns
def mulDivCount = ((project.findProperty('numberOfExercises') ?: project.findProperty('count')) ?: '200') as String
tasks.register('generateMulDiv', JavaExec) {
    group = 'application'
    description = 'Generate math exercises (MULTIPLICATION,DIVISION) into a PDF using the app'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.rick.math_excercises.MathExcercisesApplication'
    args defaultLimit, mulDivCount, defaultIterations, 'MULTIPLICATION,DIVISION'
    // Distinct filename suffix
    jvmArgs "-DoutputBaseName=${outputBaseName}", '-DoutputSuffix=_MulDiv'
    dependsOn tasks.named('classes')
}

// Convenience aggregate task to run both generators
tasks.register('generateAll') {
    group = 'application'
    description = 'Generate both addition/subtraction and multiplication/division PDFs'
    dependsOn 'generateAddSub', 'generateMulDiv'
}

spotless {
    java {
        target 'src/**/*.java'
        licenseHeaderFile 'config/spotless/license.java'
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        googleJavaFormat('1.17.0')
    }
}
