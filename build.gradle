plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.node-gradle.node' version '7.0.1'
}

group = 'org.rick'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.pdfbox:pdfbox:3.0.1'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

def frontendDir = file("${project.projectDir}/frontend")

node {
    version = '20.11.1'
    npmVersion = '10.2.4'
    download = true
    workDir = layout.buildDirectory.set(layout.projectDirectory.dir("nodejs"))
    npmWorkDir = layout.buildDirectory.set(layout.projectDirectory.dir("npm"))
    nodeProjectDir = frontendDir
}

tasks.register('createFrontendDir') {
    doLast {
        frontendDir.mkdirs()
    }
}

tasks.register('createPackageJson') {
    dependsOn createFrontendDir
    doLast {
        def packageJsonFile = file("${frontendDir}/package.json")
        if (!packageJsonFile.exists()) {
            packageJsonFile.text = """
{
  "name": "math-exercises-frontend",
  "version": "1.0.0",
  "description": "Frontend for Math Exercises application",
  "scripts": {
    "build": "echo 'Add your build script here'"
  }
}
"""
        }
    }
}

tasks.register('npmInstallFrontend', NpmTask) {
    dependsOn createPackageJson
    args = ['install']
    workingDir = frontendDir

    doFirst {
        println "Starting npm install in ${workingDir}"
    }

    doLast {
        println "Finished npm install in ${workingDir}"
        if (result.exitValue != 0) {
            throw new GradleException("npm install failed. Exit code: ${result.exitValue}")
        }
    }
}

tasks.register('buildFrontend', NpmTask) {
    dependsOn npmInstallFrontend
    args = ['run', 'build']
    workingDir = frontendDir

    doFirst {
        println "Starting frontend build in ${workingDir}"
    }

    doLast {
        println "Finished frontend build in ${workingDir}"
        if (result.exitValue != 0) {
            throw new GradleException("Frontend build failed. Exit code: ${result.exitValue}")
        }
    }
}

tasks.named('processResources') {
    dependsOn buildFrontend
    from("${frontendDir}/build") {
        into 'static'
    }
}

tasks.named('npmInstallFrontend').configure {
    inputs.file("${frontendDir}/package.json")
    outputs.dir("${frontendDir}/node_modules")
}

tasks.named('buildFrontend').configure {
    inputs.files(fileTree(frontendDir).exclude('build', 'node_modules'))
    outputs.dir("${frontendDir}/build")
}